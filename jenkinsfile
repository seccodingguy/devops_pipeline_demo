pipeline {
    agent any
    environment {
        TARGETCONTAINER="devops_pipeline_demo"
        DEVSECOPSREPOURI="devsecopslab/"
    }
    stages {
        stage('Build') {
            steps {
                sh 'echo ""'
                sh 'echo "..... Build Phase Started :: Compiling Source Code :: ......"'
                sh '''
                    cd java_web_code
                    mvn install
                '''
            }
        }
        stage('Test') {
            environment {
                IPADDRESS=(sh 'sudo docker inspect -f \'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\' env.TARGETCONTAINER)
            }
            steps {
                sh 'echo ""'
                sh 'echo "..... Test Phase Started :: Testing via Automated Scripts :: ......"'
                sh '''
                    cd ../integration-testing/
                    mvn clean verify -P integration-test
                '''
                sh 'echo ""'
                sh 'echo ""..... Integration Phase Started :: Copying Artifacts :: ......"'
                sh '''
                    cd ../java_web_code/target/
                    cp wildfly-spring-boot-sample-1.0.0.war ../../docker/
                '''
                sh 'cd ../../docker/'
                sh 'sudo docker build -t env.TARGETCONTAINER .'
                sh 'echo ""'
                sh 'echo "..... Pre-Deployment Phase Started :: Running Docker Container :: ......"'
                sh 'sudo docker run -d -p 8180:8080 --name devops_pipeline_demo devops_pipeline_demo'
                sh 'echo ""'
                sh 'echo "..............RUNNING NMAP SCAN............."'
                sh 'sudo docker run --name nmaprun -v "$WORKSPACE"/reports:/data "env.DEVSECOPSREPOURI"nmapimagev1 -A -T4 -oX "$JOB_NAME"-$BUILD_NUMBER-nmap.xml env.IPADDRESS'
                sh 'sudo docker rm nmaprun'
            }
        }
    }   
}

@NonCPS
def get_IPAddr(String container) {
    cmd = { 
        node {
            sh 'sudo docker inspect -f \'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\' ${container}'
        }
    }
    return cmd
}
